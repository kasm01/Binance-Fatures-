# 📌 Gerekli Kütüphaneleri Yükleme
import numpy as np
import ta
import logging
import pandas as pd
from binance.client import Client
from binance.enums import ORDER_TYPE_MARKET, SIDE_BUY, SIDE_SELL

# 📌 Binance API Anahtarları
API_KEY = "YOUR_BINANCE_API_KEY"
API_SECRET = "YOUR_BINANCE_API_SECRET"
client = Client(API_KEY, API_SECRET, testnet=True)

# 📌 Piyasa Verilerini Çekme
def get_market_data(symbol):
    try:
        klines = client.get_klines(symbol=symbol, interval=Client.KLINE_INTERVAL_1HOUR, limit=50)
        df = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['close'] = df['close'].astype(float)
        df['volume'] = df['volume'].astype(float)
        return df
    except Exception as e:
        logging.error(f"⚠️ API isteği başarısız: {e}")
        return None

# 📌 AI Destekli Scalping Stratejisi
def scalping_strategy(symbol):
    df = get_market_data(symbol)
    if df is None:
        return None

    # 📌 Teknik göstergeler
    df['rsi'] = ta.momentum.RSIIndicator(df['close']).rsi()
    df['macd'] = ta.trend.MACD(df['close']).macd()
    df['bollinger_upper'] = ta.volatility.BollingerBands(df['close']).bollinger_hband()
    df['bollinger_lower'] = ta.volatility.BollingerBands(df['close']).bollinger_lband()

    # 📌 AI Modeli ile En İyi Giriş Noktası
    if df['rsi'].iloc[-1] < 30 and df['close'].iloc[-1] < df['bollinger_lower'].iloc[-1]:
        return "BUY"
    elif df['rsi'].iloc[-1] > 70 and df['close'].iloc[-1] > df['bollinger_upper'].iloc[-1]:
        return "SELL"
    else:
        return None

# 📌 AI Destekli Swing Trade Stratejisi
def swing_trade_strategy(symbol):
    df = get_market_data(symbol)
    if df is None:
        return None

    # 📌 Teknik göstergeler
    df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
    df['ema_200'] = ta.trend.EMAIndicator(df['close'], window=200).ema_indicator()
    df['macd'] = ta.trend.MACD(df['close']).macd()
    df['adx'] = ta.trend.ADXIndicator(df['high'], df['low'], df['close']).adx()

    # 📌 AI Destekli Giriş Stratejisi
    if df['ema_50'].iloc[-1] > df['ema_200'].iloc[-1] and df['macd'].iloc[-1] > 0 and df['adx'].iloc[-1] > 25:
        return "BUY"
    elif df['ema_50'].iloc[-1] < df['ema_200'].iloc[-1] and df['macd'].iloc[-1] < 0 and df['adx'].iloc[-1] > 25:
        return "SELL"
    else:
        return None

# 📌 AI Destekli Dinamik Kaldıraç Yönetimi
def get_dynamic_leverage(symbol):
    df = get_market_data(symbol)
    if df is None:
        return 5  # Varsayılan kaldıraç

    df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
    volatility = df['atr'].iloc[-1] / df['close'].iloc[-1]

    if volatility > 0.05:
        leverage = 2  # Yüksek volatilite → Düşük kaldıraç
    elif volatility > 0.02:
        leverage = 5  # Orta volatilite → Orta kaldıraç
    else:
        leverage = 10  # Düşük volatilite → Yüksek kaldıraç

    return leverage

# 📌 AI Destekli İşlem Açma
def place_order(symbol, strategy):
    entry_price = float(client.get_symbol_ticker(symbol=symbol)['price'])
    action = strategy(symbol)
    
    if action is None:
        logging.info(f"🚫 {symbol} için uygun işlem sinyali bulunamadı.")
        return

    leverage = get_dynamic_leverage(symbol)
    client.futures_change_leverage(symbol=symbol, leverage=leverage)
    
    quantity = 0.01  # Örnek işlem miktarı
    order = client.futures_create_order(
        symbol=symbol,
        side=action,
        type=ORDER_TYPE_MARKET,
        quantity=quantity
    )

    logging.info(f"✅ {symbol} için {action} işlemi açıldı. Miktar: {quantity}, Giriş Fiyatı: {entry_price}")

# 📌 Scalping ve Swing Trade Stratejileri ile İşlem Açma
symbols = ["BTCUSDT", "ETHUSDT"]
for symbol in symbols:
    place_order(symbol, scalping_strategy)
    place_order(symbol, swing_trade_strategy)
